@page "/team/{teamid}"
@using MLB_Database.Services
@using MLB_Database.Data
@using Microsoft.EntityFrameworkCore
@using MLB_Database.Components

@inject MyDbContext DbContext
@inject MlbApiService MLBAPI
@inject IJSRuntime JS

@if (contentLoading)
{
    <div class="loading">
        <img src="../Logos/@(TeamId).png" />
        <div class="loading-text">
            Loading...
        </div>
    </div>  
}
else
{
    @if (TeamRoster == null)
    {
        <div class="loading">
            <img src="../Logos/@(TeamId).png" />
            <div class="loading-text">
                Team Not Found
            </div>
       </div>
    }
    <header class="@TeamRoster.Team_Abreviation">
        <div class="header-row">
            <img id="team-logo" style="margin-left: 1rem;" src="@GetLogoUrl(TeamRoster.MLBId)">
            <div id="team-name">@TeamRoster.Team_Name</div>
            <a href="/" style="width: fit-content;"><div class="info-box">Back</div></a>
        </div>
    </header>

        <div class="team-info-background">
            <div class="team-info">
                @if (Standing == "1st")
                {
                    <div class="info-box green" title="@Standing in @TeamRoster.Team_Division">@Standing</div>
                }
                else if (Standing == "5th")
                {
                    <div class="info-box pink" title="@Standing in @TeamRoster.Team_Division">@Standing</div>
                }
                else
                {
                    <div class="info-box" title="@Standing in @TeamRoster.Team_Division">@Standing</div>
                }

                @if (Clinched)
                {
                    <div class="info-box green" title="Clinched Playoffs">Clinched</div>
                }

                @if (StreakCode != null && StreakCode.Contains("W"))
                {
                    <div class="info-box green" title="Streak">Streak: @StreakCode</div>
                }
                else if (StreakCode != null && StreakCode.Contains("L"))
                {
                    <div class="info-box pink" title="Streak">Streak: @StreakCode</div>
                }
                else
                {
                    <div class="info-box" title="Streak">Streak: -</div>
                }

                <div class="info-box" title="Games Back">Games Back: @GamesBack</div>
                <div class="info-box" title="Overall Team Record">Record: @Wins-@Losses</div>
                <div class="info-box" title="Win/Loss %">PCT: @WinPercentage%</div>
                @if (HasGames)
                {
                    <div class="next-game" title="@GameDay">
                        <div>@GameTimeFormat</div>
                        <div>@AwayTeamWins-@AwayTeamLosses</div>
                        <img src="../Logos/@AwayTeamDb.Team_Logo">@@<img src="../Logos/@HomeTeamDb.Team_Logo">
                        <div style="font-size: 16px;">@HomeTeamWins-@HomeTeamLosses</div>
                    </div>
                }
                else
                {
                    <div class="next-game">No Game Today</div>
                }
                <div class="info-box" title="@TeamRoster.Team_Abreviation Baseball Reference">
                    <a href="https://www.baseball-reference.com/teams/@TeamRoster.Team_Abreviation/2024.shtml" target="_blank">
                        <img src="../logos/ref.png" style="height: 16px;" />
                    </a>
                </div>
                <div class="info-box"><img src="../Logos/@TeamRoster.Team_League_Logo" />@TeamRoster.Team_League</div>
                <div class="info-box">Established: @TeamRoster.Team_Established</div>
                <div class="info-box">Ballpark: @TeamRoster.Team_Ballpark</div>
                <a href="@TeamRoster.Team_URL" style="width: fit-content" target="_blank"><div class="info-box">News</div></a>
            </div>
        </div>
        <div class="team-row">
            <div class="rosters">
                <PlayerList Players="Infielders" PositionType="Infielders" CssClass="yellow" KvPPlayerIdPlayerHittingStats="KvPPlayerIdPlayerHittingStats" />
                <PlayerList Players="Catchers" PositionType="Catchers" CssClass="blue" KvPPlayerIdPlayerHittingStats="KvPPlayerIdPlayerHittingStats" />
                <PlayerList Players="Outfielders" PositionType="Outfielders" CssClass="green" KvPPlayerIdPlayerHittingStats="KvPPlayerIdPlayerHittingStats" />
                @if (DH.Count > 0)
                {
                    <PlayerList Players="DH" PositionType="Designated Hitter" CssClass="purple" KvPPlayerIdPlayerHittingStats="KvPPlayerIdPlayerHittingStats" />
                }
                @if (TwoWay.Count > 0)
                {
                    <TwoWayList Players="TwoWay" CssClass="orange" KvPPlayerIdPlayerHittingStats="KvPPlayerIdPlayerHittingStats" KvPPlayerIdPlayerPitchingStats="KvPPlayerIdPlayerPitchingStats" />
                }
                <PitcherList Players="Pitchers" CssClass="pink" KvPPlayerIdPlayerPitchingStats="KvPPlayerIdPlayerPitchingStats" />
            </div>
            @if (CurrentGameStats != null)
            {
                <div class="info-sidebar">
                    <div class="stadium" style="background-image: url('@GetStadiumUrl("day", HomeTeamDb.StadiumId)')">
                        <div class="box-score">
                            <div class="bs-row">
                                <div class="away-score @AwayTeamDb.Team_Abreviation">
                                    <img src="@GetLogoUrl(AwayTeamDb.MLBId)">
                                    <h1>@CurrentGameStats.Teams.Away.Runs</h1>
                                </div>
                                <div class="home-score @HomeTeamDb.Team_Abreviation-flip">
                                    <h1>@CurrentGameStats.Teams.Home.Runs</h1>
                                    <img src="@GetLogoUrl(HomeTeamDb.MLBId)">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="table-score">
                        <table>
                            <thead>
                                <tr>
                                    <th></th>
                                    @foreach (var inning in CurrentGameStats.Innings)
                                    {
                                        <th>@inning.OrdinalNum</th>
                                    }
                                    <th>R</th>
                                    <th>H</th>
                                    <th>E</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr class="@AwayTeamDb.Team_Abreviation">
                                    <td class="team-box"><img src="@GetLogoUrl(AwayTeamDb.MLBId)"></td>
                                    @foreach (var inning in CurrentGameStats.Innings)
                                    {
                                        <td>@inning.Away.Runs</td>
                                    }
                                    <td>@CurrentGameStats.Teams.Away.Runs</td>
                                    <td>@CurrentGameStats.Teams.Away.Hits</td>
                                    <td>@CurrentGameStats.Teams.Away.Errors</td>
                                </tr>
                                <tr class="@HomeTeamDb.Team_Abreviation">
                                    <td class="team-box"><img src="@GetLogoUrl(HomeTeamDb.MLBId)"></td>
                                    @foreach (var inning in CurrentGameStats.Innings)
                                    {
                                        <td>@inning.Home.Runs</td>
                                    }
                                    <td>@CurrentGameStats.Teams.Home.Runs</td>
                                    <td>@CurrentGameStats.Teams.Home.Hits</td>
                                    <td>@CurrentGameStats.Teams.Home.Errors</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    @*                         <div class="inning-info">
        <p>Current Inning: @CurrentGameStats.CurrentInningOrdinal (@CurrentGameStats.InningState)</p>
        <p>Outs: @CurrentGameStats.Outs</p>
        <p>Balls: @CurrentGameStats.Balls</p>
        <p>Strikes: @CurrentGameStats.Strikes</p>
        </div> *@
                </div>
            }
        </div>
    }
}
@code {
    [Parameter]
    public string? TeamId { get; set; }
    public TeamInfo? TeamRoster { get; set; }
    public TeamInfo? HomeTeamDb { get; set; }
    public TeamInfo? AwayTeamDb { get; set; }
    public int Wins { get; set; }
    public int Losses { get; set; }
    public string? Standing { get; set; }
    public string? WinPercentage { get; set; }
    public MlbRosterResponse? MLBRoster { get; set; }
    public MlbPlayerStatsResponse? PlayerStats { get; set; }
    public double BattingAverage { get; set; }
    public List<Player> Pitchers { get; set; } = new();
    public List<Player> Infielders { get; set; } = new();
    public List<Player> Catchers { get; set; } = new();
    public List<Player> Outfielders { get; set; } = new();
    public List<Player> DH { get; set; } = new();
    public List<Player> TwoWay { get; set; } = new();
    public Dictionary<int, MlbPlayerStatsResponse> KvPPlayerIdPlayerHittingStats { get; set; } = new();
    public Dictionary<int, MlbPlayerStatsResponse> KvPPlayerIdPlayerPitchingStats { get; set; } = new();
    private List<TeamInfo> teams = new List<TeamInfo>();
    public MatchUpResponse? MatchUp { get; set; }
    public string? Link { get; set; }
    public string? GameType { get; set; }
    public string? Name { get; set; }
    public string? HomeTeam { get; set; }
    public string? AwayTeam { get; set; }
    public string? GameDate { get; set; }
    public string? GameTime { get; set; }
    public string? GameTimeFormat { get; set; }
    public string? GameDay { get; set; }
    public int HomeTeamWins { get; set; }
    public int AwayTeamWins { get; set; }
    public int HomeTeamLosses { get; set; }
    public int AwayTeamLosses { get; set; }
    public string? StreakCode { get; set; }
    public string? GamesBack { get; set; }
    public bool Clinched { get; set; }
    public bool HasWildCard { get; set; }
    private bool contentLoading = true;
    public bool HasGames { get; set; } = true;
    public int StadiumId { get; set; }
    public LinescoreResponse? CurrentGameStats { get; set; }

    private async Task LoadDataAsync()
    {
        contentLoading = true;

        var fetchDataTask = DbContext.TeamInfo.ToListAsync();
        var delayTask = Task.Delay(1000);

        await Task.WhenAll(fetchDataTask, delayTask);

        teams = fetchDataTask.Result;
        teams = await DbContext.TeamInfo.ToListAsync();
        TeamRoster = teams.FirstOrDefault(x => x.Id == int.Parse(TeamId));
        var record = await MLBAPI.GetTeamRecord(TeamRoster.MLBId, DateTime.Now.Year);

        MatchUp = await MLBAPI.GetMatchUp(TeamRoster.MLBId);

        if (MatchUp.TotalGames == 0)
        {
            HasGames = false;
        }
        else
        {
            HomeTeam = MatchUp.Dates[0].Games[0].Teams.Home.Team.Name;
            HomeTeamWins = MatchUp.Dates[0].Games[0].Teams.Home.LeagueRecord.Wins;
            HomeTeamLosses = MatchUp.Dates[0].Games[0].Teams.Home.LeagueRecord.Losses;

            AwayTeam = MatchUp.Dates[0].Games[0].Teams.Away.Team.Name;
            AwayTeamWins = MatchUp.Dates[0].Games[0].Teams.Away.LeagueRecord.Wins;
            AwayTeamLosses = MatchUp.Dates[0].Games[0].Teams.Away.LeagueRecord.Losses;

            Link = MatchUp.Dates[0].Games[0].Link;
            GameType = MatchUp.Dates[0].Games[0].GameType;
            GameTime = MatchUp.Dates[0].Games[0].GameDate;

            if (DateTime.TryParse(GameTime, out var gameDateTime))
            {
                GameTimeFormat = gameDateTime.ToString("h:mm tt");
            }
            else
            {
                GameTimeFormat = "Invalid Date Format"; // fallback message in case parsing fails
            }

            HomeTeamDb = teams.FirstOrDefault(x => x.MLBId == MatchUp.Dates[0].Games[0].Teams.Home.Team.Id);
            AwayTeamDb = teams.FirstOrDefault(x => x.MLBId == MatchUp.Dates[0].Games[0].Teams.Away.Team.Id);

            GameDate = MatchUp.Dates[0].Games[0].OfficialDate;
            if (DateTime.TryParse(GameDate, out var gameDate))
            {
                GameDay = gameDate.DayOfWeek.ToString();
            }
        }

        GamesBack = record.GamesBack;
        Clinched = record.Records.Clinched;
        HasWildCard = record.Records.HasWildCard;

        Wins = record.LeagueRecord.Wins;
        Losses = record.LeagueRecord.Losses;
        Standing = Ordinals.AddOrdinal(record.DivisionRank);
        WinPercentage = (Math.Round((double)Wins / ((double)Wins + (double)Losses), 4) * 100).ToString("0.00");
        MLBRoster = await MLBAPI.GetTeamRoster(TeamRoster.MLBId);

        foreach (var player in MLBRoster.Roster)
        {
            var hittingStats = await MLBAPI.GetPlayerSeasonStats(player.Person.Id, DateTime.Now.Year, "hitting");
            KvPPlayerIdPlayerHittingStats.Add(player.Person.Id, hittingStats);
            var pitchingStats = await MLBAPI.GetPlayerSeasonStats(player.Person.Id, DateTime.Now.Year, "pitching");
            KvPPlayerIdPlayerPitchingStats.Add(player.Person.Id, pitchingStats);

            player.Person.Image = MLBAPI.GetPlayerImageUrl(player.Person.Id);
            player.Person.Stats = await MLBAPI.GetPlayerSeasonStats(player.Person.Id, 2023, "hitting");
        }

        Pitchers = MLBRoster.Roster.Where(x => x.Position.Type == "Pitcher").ToList();
        Infielders = MLBRoster.Roster.Where(x => x.Position.Type == "Infielder").ToList();
        Catchers = MLBRoster.Roster.Where(x => x.Position.Type == "Catcher").ToList();
        Outfielders = MLBRoster.Roster.Where(x => x.Position.Type == "Outfielder").ToList();
        DH = MLBRoster.Roster.Where(x => x.Position.Type == "Hitter").ToList();
        TwoWay = MLBRoster.Roster.Where(x => x.Position.Type == "Two-Way Player").ToList();

        if (HasGames)
        {
            await LoadCurrentGameStatsAsync(MatchUp.Dates[0].Games[0].GamePk);
        }

        contentLoading = false;
        StateHasChanged();
    }

    private async Task LoadCurrentGameStatsAsync(int gamePk)
    {
        CurrentGameStats = await MLBAPI.GetCurrentGameStats(gamePk);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    public string GetLogoUrl(int teamId)
    {
        return $"https://www.mlbstatic.com/team-logos/team-cap-on-dark/{teamId}.svg";
    }

    public string GetCircleLogo(int teamId)
    {
        return $"https://midfield.mlbstatic.com/v1/team/{teamId}/spots/48";
    }

    public string GetStadiumUrl(string time, int stadiumId)
    {
        DateTime gameDateTime;

        if (DateTime.TryParse(GameTime, out gameDateTime))
        {
            if (gameDateTime.Hour >= 17) // 5 PM
            {
                time = "night";
            }
            else
            {
                time = "day";
            }
        }
        else
        {
            int currentHour = DateTime.Now.Hour;
            if (currentHour >= 17)
            {
                time = "night";
            }
            else
            {
                time = "day";
            }
        }

        return $"https://prod-gameday.mlbstatic.com/responsive-gameday-assets/1.3.0/images/stadiums/{time}/{stadiumId}@2x.jpg";
    }


}
